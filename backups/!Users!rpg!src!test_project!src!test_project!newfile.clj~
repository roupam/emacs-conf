(ns euler
  (:require [clojure.contrib.generic.math-functions]
        [clojure.contrib.math]))

(defn divisorsn
          [n]
        (filter #(zero? (mod n %)) (range 1 (+ n 1))))

(defn isprime?
  [n]
  (true? (= 2 (count (divisorsn n)))))

(defn primelist
  [n]
  (filter isprime? (range 1 n)))

(defn sumprimelist
  [n]
  (reduce + (primelist n)))

(defn is3or5multiple?
  "Project Euler Problem 1"
  [n]
  (true? (or (zero? (mod n 3)) (zero? (mod n 5)))))

(defn sumof3n5
  "Project Euler Problem 1"
  [n]
  (reduce + (filter is3or5multiple? (range 1 n))))

(defn ispalindrome?
  [n]
  (true? (= n (reverse n))))

(defn factorialn [n] (reduce * (range 1 n)))


(defn sieve [n]
  "By Rich Hickey"
  (let [n (int n)]
    "Returns a list of all primes from 2 to n"
    (let [root (int (Math/round (Math/floor (Math/sqrt n))))]
      (loop [i (int 3)
             a (int-array n)
             result (list 2)]
        (if (>= i n)
          (reverse result)
          (recur (+ i (int 2))
                 (if (< i root)
                   (loop [arr a
                          inc (+ i i)
                          j (* i i)]
                     (if (>= j n)
                       arr
                       (recur (do (aset arr j (int 1)) arr)
                              inc
                              (+ j inc))))
                   a)
                 (if (zero? (aget a i))
                   (conj result i)
                   result)))))))

(defn cramer-range
  [n]
  (range n (Math/floor (+ n (* (Math/log n) (Math/log n))))))

(defn sum_n
  [n]
  (* n (/ (+ n 1) 2)))

(defn find_n_given_sum
  [sum]
  (if (< sum 1)
    0
    (recur (find_n_given_sum (sum_n (- sum 1))))))
